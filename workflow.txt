Creating a tool to solve the Traveling Salesman Problem (TSP) using data from Google Maps and finding the optimal route involves several steps. Here's a high-level outline of the process:

1. **Problem Understanding**:
   Understand the Traveling Salesman Problem and its implications. The TSP involves finding the shortest possible route that visits each city exactly once and returns to the origin city.

2. **Data Collection**:
   Utilize Google Maps API to fetch data about cities, their coordinates, and distances between them. Google Maps API provides rich data about locations, distances, and routes.

3. **Data Processing**:
   Process the data obtained from Google Maps API to extract relevant information such as city coordinates and distances between cities. You may need to preprocess the data to ensure it's in a suitable format for further analysis.

4. **Algorithm Selection**:
   Choose an appropriate algorithm to solve the TSP. Common algorithms include:
   - Exact algorithms (e.g., dynamic programming, branch and bound)
   - Approximation algorithms (e.g., nearest neighbor, genetic algorithms, simulated annealing)

5. **Implementation**:
   Implement the chosen algorithm to solve the TSP. This involves writing code to calculate the optimal route based on the input data.

6. **Integration with Google Maps API**:
   Integrate your algorithm with the Google Maps API to visualize the optimal route on the map. You can use markers to represent cities and polylines to connect them in the optimal order.

7. **Testing and Optimization**:
   Test your tool with various inputs and evaluate its performance. You may need to optimize your algorithm and code for efficiency and accuracy.

8. **User Interface (Optional)**:
   Develop a user interface for your tool to make it more user-friendly. Users should be able to input their locations and preferences easily and visualize the optimal route on a map.

9. **Documentation and Deployment**:
   Document your tool, including its functionality, usage instructions, and any dependencies. Deploy your tool to a suitable platform or package it for distribution.

10. **Maintenance and Updates**:
   Maintain your tool by addressing any bugs or issues reported by users. Keep it up to date with changes in the Google Maps API or any improvements to the underlying algorithms.

Implementation plan for v1.0:
- Start with random 10 addresses, and our shop as source.
- Convert addresses to locations
- Calculate shortest route using Djikstra's Algorithm
- Sort the list of destinations as per the route
- Put the sorted destinations onto Google Maps, generate the path line, with estimated time
- Done!

Intuition for v2.0:
- Consider the real-time traffic impact